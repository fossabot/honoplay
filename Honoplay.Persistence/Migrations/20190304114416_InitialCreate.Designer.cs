// <auto-generated />
using System;
using Honoplay.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Honoplay.Persistence.Migrations
{
    [DbContext(typeof(HonoplayDbContext))]
    [Migration("20190304114416_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Honoplay.Domain.Entities.AdminUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTimeOffset>("CreatedDateTime");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<DateTimeOffset>("LastPasswordChangeDateTime");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<int>("NumberOfInvalidPasswordAttemps");

                    b.Property<byte[]>("Password");

                    b.Property<string>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("TimeZone")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(3);

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTimeOffset?>("UpdatedDateTime");

                    b.Property<string>("UserName")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("Email")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("AdminUsers");
                });

            modelBuilder.Entity("Honoplay.Domain.Entities.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<int>("CreatedBy");

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<string>("HostName")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<byte[]>("Logo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("UpdatedAt");

                    b.Property<int?>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasAlternateKey("HostName");

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("Honoplay.Domain.Entities.TenantAdminUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AdminUserId");

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<int>("CreatedBy");

                    b.Property<Guid>("TenantId");

                    b.Property<DateTimeOffset?>("UpdatedAt");

                    b.Property<int?>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("AdminUserId");

                    b.HasIndex("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("TenantAdminUser");
                });

            modelBuilder.Entity("Honoplay.Domain.Entities.TenantAdminUser", b =>
                {
                    b.HasOne("Honoplay.Domain.Entities.AdminUser", "AdminUser")
                        .WithMany("TenantAdminUsers")
                        .HasForeignKey("AdminUserId")
                        .HasConstraintName("FK_AdminUser_TenantAdminUsers")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Honoplay.Domain.Entities.Tenant", "Tenant")
                        .WithMany("TenantAdminUsers")
                        .HasForeignKey("TenantId")
                        .HasConstraintName("FK_Tenant_TenantAdminUsers")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
