// <auto-generated />
using System;
using Honoplay.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Honoplay.Persistence.Migrations
{
    [DbContext(typeof(HonoplayDbContext))]
    [Migration("20190213115629_IsRequiredChanges")]
    partial class IsRequiredChanges
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Honoplay.Domain.Entities.AdminUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTimeOffset>("CreatedDateTime");

                    b.Property<string>("EMailAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTimeOffset>("LastPasswordChangeDateTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("NumberOfInvalidPasswordAttemps");

                    b.Property<byte[]>("Password");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("TenantId");

                    b.Property<int>("TimeZone")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(3);

                    b.Property<int?>("UpdatedBy");

                    b.Property<DateTimeOffset>("UpdatedDateTime");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "EMailAddress")
                        .IsUnique()
                        .HasFilter("[EMailAddress] IS NOT NULL");

                    b.HasIndex("TenantId", "Username")
                        .IsUnique();

                    b.ToTable("AdminUsers");
                });

            modelBuilder.Entity("Honoplay.Domain.Entities.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<string>("HostName")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<byte[]>("Logo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasAlternateKey("HostName");

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("Honoplay.Domain.Entities.AdminUser", b =>
                {
                    b.HasOne("Honoplay.Domain.Entities.Tenant", "Tenant")
                        .WithMany("AdminUsers")
                        .HasForeignKey("TenantId")
                        .HasConstraintName("FK_AdminUsers_Tenants")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
